package com.flux.data;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityResult;
import javax.persistence.FieldResult;
import javax.persistence.PersistenceContext;
import javax.persistence.SqlResultSetMapping;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.flux.models.Stats;

@Repository
public class TransactionDAOImpl implements TransactionDAO {
	
	@PersistenceContext
	private EntityManager em;
	
	private List<Stats> stats;
	
	@Override
	public List<Stats> transactionStats() {
		List<Object> countResults = em.createNativeQuery("SELECT t.state, \n" + " COUNT(*), \n"
				+ " sum(case when t.state='MATCHED' then 1 else 0 end) as matched , \n"
				+ " sum(case when t.state='UNMATCHED' then 1 else 0 end) as unmatched \n" + " from Transactions t \n"
				+ " group by t.state", "Statistics").getResultList();
		System.out.println(countResults.toString());
		
		@SqlResultSetMapping(
			name="Statistics",
			    classes={
			      @ConstructorResult(
			        targetClass=Stats.class,
			        columns={
			          @ColumnResult(name="state", type=String.class),
			          @ColumnResult(name="total", type=Integer.class),
			          @ColumnResult(name="matchedCount", type=Integer.class),
			          @ColumnResult(name="unmatchedCound", type=Integer.class)}
			        )
			      }
			)
		
		
//		countResults.stream().forEach((transaction) -> {
//			Stats stat = (Stats)transaction;
//			stats.add(stat);
//			System.out.println(stat);
//		});
		return stats;
	}
}
